#decision tree

#package for reading
library(readr)
#package for pipe command
library(dplyr)
#package for conditional tree
library(party)
#package for recursive partitioning tree
library(rpart)
#package for plotting recursive partitioning tree
library(rpart.plot)
#package for Receiver Operating Characteristic Curve (ROC)
library(ROCR)
#to set the seed for pseudo random numbers for sample command
set.seed(1200)
#To read the relevant attributes
titanic3 = "https://goo.gl/At238b" %>%
  read.csv %>% # read in the data
  select(survived, embarked, sex, 
         sibsp, parch, fare) %>%
  mutate(embarked = factor(embarked),
         sex = factor(sex))
titanic3


#Summarise attributes fare and sibsp
summary(titanic3$fare)
summary(titanic3$sibsp)

#To generate training and test sets 
#bootstrap 0.632 training and the rest for test sets
.data <- c("training", "test")%>% 
  sample(nrow(titanic3), replace = T)%>%
  split(titanic3,.)

#To generate recursive partitioning tree - attribute selection based on information gain
rtree_fit <- rpart(survived ~ fare, .data$training) 
rtree_fit
#To plot the recursive partitioning tree
rpart.plot(rtree_fit)

#To print the recursive partitioning tree 
print(rtree_fit)
#To build conditional tree # To chose attribute  based on significance
ctree_fit <- ctree(survived ~ .,data = .data$training)
#To test and plot ROC curve for Conditional tree
print(ctree_fit)

ctree_roc <- ctree_fit %>%
  predict(newdata = .data$test) %>%
  prediction(.data$test$survived) %>%
  performance("tpr", "fpr")

ROCR::plot(ctree_roc)

#To test and plot ROC curve for recursive partitioning tree
rtree_roc <- rtree_fit %>%
  predict(newdata = .data$test) %>%
  prediction(.data$test$survived) %>%
  performance("tpr", "fpr")

ROCR::plot(rtree_roc)
#To compare performance of both trees
ROCR::plot(ctree_roc,col=7,add=TRUE)





#CAR DATASET

install.packages("caret")
library(caret)
library(rpart.plot)
data_url <- c("https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data")
download.file(url = data_url, destfile = "car.data")
car_df <- read.csv("car.data", sep = ',', header = FALSE)
str(car_df)
head(car_df)
set.seed(3033)
intrain <- createDataPartition(y = car_df$V7, p= 0.7, list = FALSE)
training <- car_df[intrain,]
testing <- car_df[-intrain,]
#help("createDataPartition")
#check dimensions of train & test set
dim(training); 
dim(testing);
anyNA(car_df)
summary(car_df)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#help("trainControl")
set.seed(3333)
dtree_fit <- train(V7 ~., data = training, method = "rpart",
                   parms = list(split = "information"),
                   trControl=trctrl,
                   tuneLength = 10)
#help("train")
prp(dtree_fit$finalModel, box.palette = "Reds", tweak = 1.2)


#testing[1,]

#predict(dtree_fit, newdata = testing[1,])
test_pred <- predict(dtree_fit, newdata = testing)
confusionMatrix(test_pred, testing$V7 )  #check accuracy

set.seed(3333)
dtree_fit_gini <- train(V7 ~., data = training, method = "rpart",
                        parms = list(split = "gini"),
                        trControl=trctrl,
                        tuneLength = 10)
dtree_fit_gini
prp(dtree_fit_gini$finalModel, box.palette = "Blues", tweak = 1.2)
test_pred_gini <- predict(dtree_fit_gini, newdata = testing)
confusionMatrix(test_pred_gini, testing$V7 )  #check accuracy

